let wordsData = {}
let indexData = null
let loadedChunks = new Set()

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–¥–µ–∫—Å
fetch('/cartoon-word-stats/chunks/index.json')
	.then(response => response.json())
	.then(index => {
		indexData = index
		// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–π —á–∞–Ω–∫
		return loadChunk(0)
	})
	.then(() => {
		renderWords()
	})
	.catch(error => {
		console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error)
		document.getElementById('wordList').innerHTML =
			'<div class="no-results">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</div>'
	})

async function loadChunk(chunkNum) {
	if (loadedChunks.has(chunkNum)) return

	try {
		const response = await fetch(`/cartoon-word-stats/chunks/chunk-${chunkNum}.json`)
		const chunkData = await response.json()
		Object.assign(wordsData, chunkData)
		loadedChunks.add(chunkNum)
	} catch (error) {
		console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞–Ω–∫–∞ ${chunkNum}:`, error)
	}
}

let currentLimit = 100

async function renderWords(filter = '', limit = currentLimit) {
	const wordList = document.getElementById('wordList')

	if (!indexData) return

	let wordsToShow
	let needLoadAll = false

	if (filter) {
		const lowerFilter = filter.toLowerCase()

		// –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ª–µ–º–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
		const matchingLemmas = indexData.words.filter(word =>
			word.toLowerCase().startsWith(lowerFilter)
		)

		// –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ª–µ–º–º—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
		if (matchingLemmas.length > 0) {
			wordsToShow = matchingLemmas
		} else {
			// –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ —á–∞–Ω–∫–∏ –∏ –∏—Å–∫–∞—Ç—å –ø–æ —Ñ–æ—Ä–º–∞–º
			needLoadAll = true
			wordsToShow = indexData.words
		}
	} else {
		// –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ N —Å–ª–æ–≤
		wordsToShow = indexData.words.slice(0, limit)
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —á–∞–Ω–∫–∏ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å
	const chunksNeeded = new Set()

	if (needLoadAll || filter) {
		// –ü—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —á–∞–Ω–∫–∏
		const totalChunks = indexData.chunksCount
		for (let i = 0; i < totalChunks; i++) {
			chunksNeeded.add(i)
		}
	} else {
		// –ë–µ–∑ –ø–æ–∏—Å–∫–∞ - —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —á–∞–Ω–∫–∏
		wordsToShow.forEach(word => {
			const idx = indexData.words.indexOf(word)
			const chunkNum = Math.floor(idx / indexData.chunkSize)
			chunksNeeded.add(chunkNum)
		})
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —á–∞–Ω–∫–∏
	const loadPromises = []
	for (const chunkNum of chunksNeeded) {
		if (!loadedChunks.has(chunkNum)) {
			loadPromises.push(loadChunk(chunkNum))
		}
	}

	if (loadPromises.length > 0) {
		await Promise.all(loadPromises)
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º: –∏—â–µ–º –ø–æ –ª–µ–º–º–∞–º –ò –ø–æ –≤—Å–µ–º —Ñ–æ—Ä–º–∞–º
	const filtered = indexData.words.filter(word => {
		const data = wordsData[word]
		if (!data) return false
		if (!filter) return indexData.words.indexOf(word) < limit

		const lowerFilter = filter.toLowerCase()
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–µ–º–º—É
		if (word.toLowerCase().startsWith(lowerFilter)) return true
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ñ–æ—Ä–º—ã
		return Object.keys(data.forms).some(form =>
			form.toLowerCase().startsWith(lowerFilter)
		)
	})

	if (filtered.length === 0) {
		wordList.innerHTML = '<div class="no-results">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</div>'
		const listInfo = document.getElementById('listInfo')
		listInfo.textContent = '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
		return
	}

	const html = filtered
		.map(word => {
			const data = wordsData[word]
			const lemma = word
			const formsCount = Object.keys(data.forms).length
			const expansions = data.expansions || {}
			const formsHtml = Object.entries(data.forms)
				.map(([form, count]) => {
					const expansion = expansions[form]
					const titleAttr = expansion ? ` title="${expansion}"` : ''
					const expansionHtml = expansion
						? `<span class="form-expansion" title="${expansion}">üí¨</span>`
						: ''
					return `<div class="form-item"${titleAttr}>
					<span class="form-word">${form}</span>
					${expansionHtml}
					<span class="form-count">${count.toLocaleString()}</span>
				</div>`
				})
				.join('')

			return `
			<div class="word-item">
				<div class="word-header" onclick="toggleForms(this)">
					<div>
						<span class="word-lemma">${lemma}</span>
						${
							formsCount > 1
								? ` <span style="color: #888; font-size: 0.9em;">(${formsCount} —Ñ–æ—Ä–º)</span>`
								: ''
						}
					</div>
					<div>
						<span class="word-total">${data.total.toLocaleString()}</span>
						${formsCount > 1 ? '<span class="toggle-icon">‚ñº</span>' : ''}
					</div>
				</div>
				${formsCount > 1 ? `<div class="word-forms">${formsHtml}</div>` : ''}
			</div>
		`
		})
		.join('')

	wordList.innerHTML = html

	// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–∏—Å–∫–µ
	const listInfo = document.getElementById('listInfo')
	if (filter) {
		listInfo.textContent = `–ù–∞–π–¥–µ–Ω–æ: ${filtered.length.toLocaleString()} —Å–ª–æ–≤`
	} else {
		listInfo.textContent = `–ü–æ–∫–∞–∑–∞–Ω–æ: ${Math.min(
			limit,
			indexData.totalWords
		).toLocaleString()} –∏–∑ ${indexData.totalWords.toLocaleString()} —Å–ª–æ–≤`
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ" –µ—Å–ª–∏ –Ω–µ—Ç —Ñ–∏–ª—å—Ç—Ä–∞ –∏ –µ—Å—Ç—å –µ—â–µ –∑–∞–ø–∏—Å–∏
	if (!filter && limit < indexData.totalWords) {
		const loadMoreBtn = document.createElement('div')
		loadMoreBtn.style.cssText = 'text-align: center; margin: 30px 0;'
		const btnStyle = `
			padding: 15px 40px;
			font-size: 1.1em;
			background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
			color: white;
			border: none;
			border-radius: 10px;
			cursor: pointer;
			font-weight: 600;
			transition: transform 0.2s, box-shadow 0.2s;
			margin: 0 10px;
		`
		loadMoreBtn.innerHTML = `
			<button onclick="loadMore()" style="${btnStyle}"
			   onmouseover="this.style.transform='scale(1.05)'; this.style.boxShadow='0 10px 25px rgba(0,0,0,0.2)'" 
			   onmouseout="this.style.transform='scale(1)'; this.style.boxShadow='none'">
				–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë 100
			</button>
			<button onclick="loadAll()" style="${btnStyle}"
			   onmouseover="this.style.transform='scale(1.05)'; this.style.boxShadow='0 10px 25px rgba(0,0,0,0.2)'" 
			   onmouseout="this.style.transform='scale(1)'; this.style.boxShadow='none'">
				–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ (${(indexData.totalWords - limit).toLocaleString()} –æ—Å—Ç–∞–ª–æ—Å—å)
			</button>
		`
		wordList.appendChild(loadMoreBtn)
	}
}

async function loadMore() {
	currentLimit += 100
	await renderWords('', currentLimit)
}

async function loadAll() {
	currentLimit = indexData.totalWords
	await renderWords('', currentLimit)
}

function toggleForms(header) {
	const forms = header.nextElementSibling
	if (forms && forms.classList.contains('word-forms')) {
		forms.classList.toggle('active')
		const icon = header.querySelector('.toggle-icon')
		if (icon) {
			icon.textContent = forms.classList.contains('active') ? '‚ñ≤' : '‚ñº'
		}
	}
}

// –ü–æ–∏—Å–∫
document.getElementById('searchInput').addEventListener('input', e => {
	currentLimit = 100 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç –ø—Ä–∏ –ø–æ–∏—Å–∫–µ
	renderWords(e.target.value)
})
