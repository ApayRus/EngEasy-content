let wordsData = {}
let loadedChunks = new Set()
let indexData = null
let chart = null
let currentPage = 0
let wordsPerPage = 50
let isSearchMode = false
let searchCenterIndex = 0 // –ò–Ω–¥–µ–∫—Å —Ü–µ–Ω—Ç—Ä–∞ –æ–∫–Ω–∞ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
const isMobile = window.innerWidth <= 768

// –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—å—à–µ —Å–ª–æ–≤
if (isMobile) {
	wordsPerPage = 20
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–¥–µ–∫—Å
fetch('/cartoon-word-stats/chunks/index.json')
	.then(response => response.json())
	.then(index => {
		indexData = index

		// –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
		if (isMobile) {
			document.querySelectorAll('.btn-group .btn').forEach(btn => {
				btn.classList.remove('active')
				if (btn.textContent.includes('20')) {
					btn.classList.add('active')
				}
			})
		}

		// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–π —á–∞–Ω–∫
		loadChunksForPage(0)
	})

async function setWordsPerPage(count) {
	wordsPerPage = count

	// –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
	document
		.querySelectorAll('.btn-group .btn')
		.forEach(btn => btn.classList.remove('active'))
	event.target.classList.add('active')

	// –ï—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞ - –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å –Ω–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–ª–æ–≤
	if (isSearchMode && highlightedWord) {
		const wordIndex = indexData.words.indexOf(highlightedWord)
		searchCenterIndex = wordIndex // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ü–µ–Ω—Ç—Ä –Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
		await renderWordInContext(wordIndex, highlightedWord)
	} else {
		currentPage = 0
		await loadChunksForPage(0)
	}
}

async function previousPage() {
	if (isSearchMode && highlightedWord) {
		// –í —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞ –¥–≤–∏–≥–∞–µ–º –æ–∫–Ω–æ –Ω–∞ wordsPerPage –Ω–∞–∑–∞–¥
		searchCenterIndex = Math.max(0, searchCenterIndex - wordsPerPage)
		await renderWordInContext(searchCenterIndex, highlightedWord)
	} else {
		if (currentPage > 0) {
			currentPage--
			await loadChunksForPage(currentPage)
		}
	}
}

async function nextPage() {
	if (isSearchMode && highlightedWord) {
		// –í —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞ –¥–≤–∏–≥–∞–µ–º –æ–∫–Ω–æ –Ω–∞ wordsPerPage –≤–ø–µ—Ä–µ–¥
		searchCenterIndex = Math.min(
			indexData.totalWords - 1,
			searchCenterIndex + wordsPerPage
		)
		await renderWordInContext(searchCenterIndex, highlightedWord)
	} else {
		const maxPage = Math.ceil(indexData.totalWords / wordsPerPage) - 1
		if (currentPage < maxPage) {
			currentPage++
			await loadChunksForPage(currentPage)
		}
	}
}

async function loadChunksForPage(page) {
	const startIdx = page * wordsPerPage
	const endIdx = startIdx + wordsPerPage

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —á–∞–Ω–∫–∏ –Ω—É–∂–Ω—ã
	const startChunk = Math.floor(startIdx / 100)
	const endChunk = Math.floor(endIdx / 100)

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —á–∞–Ω–∫–∏
	const loadPromises = []
	for (let chunkNum = startChunk; chunkNum <= endChunk; chunkNum++) {
		if (!loadedChunks.has(chunkNum) && chunkNum < indexData.chunksCount) {
			loadPromises.push(loadChunk(chunkNum))
		}
	}

	if (loadPromises.length > 0) {
		await Promise.all(loadPromises)
	}

	renderChart()
}

async function loadChunk(chunkNum) {
	try {
		const response = await fetch(`/cartoon-word-stats/chunks/chunk-${chunkNum}.json`)
		const chunkData = await response.json()

		// –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —á–∞–Ω–∫–∞ –≤ –æ–±—â–∏–π –æ–±—ä–µ–∫—Ç
		Object.assign(wordsData, chunkData)
		loadedChunks.add(chunkNum)

		console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω —á–∞–Ω–∫ ${chunkNum}`)
	} catch (error) {
		console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞–Ω–∫–∞ ${chunkNum}:`, error)
	}
}

function renderChart() {
	if (isSearchMode) return

	const startIdx = currentPage * wordsPerPage
	const endIdx = startIdx + wordsPerPage

	// –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –∏–Ω–¥–µ–∫—Å–∞
	const pageWords = indexData.words.slice(startIdx, endIdx)

	// –°–æ–∑–¥–∞–µ–º entries –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	const entries = pageWords
		.map(word => [word, wordsData[word]])
		.filter(([word, data]) => data) // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã

	updateChart(entries, highlightedWord)
	updateNavigation()
}

function updateChart(entries, highlightWord = null) {
	const labels = entries.map(([word]) => word)
	const values = entries.map(([, data]) => data.total)

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç —Ü–≤–µ—Ç–æ–≤ –æ—Ç —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–≥–æ –∫ —Å–∏–Ω–µ–º—É
	const colors = entries.map(([word], i) => {
		// –ï—Å–ª–∏ —ç—Ç–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ - –≤—ã–¥–µ–ª—è–µ–º –µ–≥–æ –æ—Ä–∞–Ω–∂–µ–≤—ã–º
		if (highlightWord && word === highlightWord) {
			return `hsla(30, 90%, 55%, 0.85)` // –Ø—Ä–∫–∏–π –æ—Ä–∞–Ω–∂–µ–≤—ã–π
		}

		const ratio = i / entries.length
		const hue = 250 - ratio * 30 // –û—Ç —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–≥–æ (280) –∫ —Å–∏–Ω–µ–º—É (250)
		const lightness = 55 + ratio * 10 // –ù–µ–±–æ–ª—å—à–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —è—Ä–∫–æ—Å—Ç–∏
		return `hsla(${hue}, 70%, ${lightness}%, 0.85)`
	})

	const ctx = document.getElementById('wordChart').getContext('2d')

	if (chart) {
		chart.destroy()
	}

	chart = new Chart(ctx, {
		type: 'bar',
		data: {
			labels: labels,
			datasets: [
				{
					label: '–ß–∞—Å—Ç–æ—Ç–∞',
					data: values,
					backgroundColor: colors,
					borderColor: colors.map(c => c.replace('0.85', '1')),
					borderWidth: 2,
					borderRadius: 6,
					hoverBackgroundColor: colors.map(c => c.replace('0.85', '0.95')),
					barPercentage: 0.95,
					categoryPercentage: 1.0
				}
			]
		},
		options: {
			responsive: true,
			maintainAspectRatio: false,
			onClick: (event, elements) => {
				if (elements.length > 0) {
					const index = elements[0].index
					const word = labels[index]
					showWordDetails(word)
				}
			},
			plugins: {
				legend: {
					display: false
				},
				tooltip: {
					backgroundColor: 'rgba(0, 0, 0, 0.8)',
					padding: 15,
					titleFont: {
						size: 16,
						weight: 'bold'
					},
					bodyFont: {
						size: 14
					},
					callbacks: {
						title: function (context) {
							return context[0].label
						},
						label: function (context) {
							const word = context.label
							const data = wordsData[word]
							const formsCount = Object.keys(data.forms).length
							const forms = Object.keys(data.forms).slice(0, 3).join(', ')
							return [
								`–í—Å–µ–≥–æ: ${context.parsed.y.toLocaleString()}`,
								formsCount > 1 ? `–§–æ—Ä–º: ${formsCount} (${forms}...)` : '',
								'',
								'üñ±Ô∏è –ö–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π'
							].filter(Boolean)
						}
					}
				}
			},
			scales: {
				y: {
					beginAtZero: true,
					title: {
						display: !isMobile,
						text: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π',
						font: {
							size: 16,
							weight: 'bold'
						},
						color: '#333'
					},
					ticks: {
						font: {
							size: isMobile ? 8 : 16
						},
						callback: function (value) {
							// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞: 2500 -> 2.5k, 1000 -> 1k
							if (value >= 1000) {
								return (value / 1000).toFixed(1).replace(/\.0$/, '') + 'k'
							}
							return value
						}
					},
					grid: {
						color: 'rgba(0, 0, 0, 0.05)'
					}
				},
				x: {
					title: {
						display: !isMobile,
						text: '–°–ª–æ–≤–∞ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)',
						font: {
							size: 14,
							weight: 'bold'
						},
						color: '#333'
					},
					ticks: {
						font: {
							size: (() => {
								// –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤
								if (wordsPerPage === 20) {
									return isMobile ? 14 : 24
								} else if (wordsPerPage === 50) {
									return isMobile ? 9 : 20
								} else {
									return isMobile ? 7 : 14
								}
							})(),
							weight: '500'
						},
						color: '#333',
						maxRotation: 90,
						minRotation: 90,
						autoSkip: false,
						maxTicksLimit: isMobile ? wordsPerPage : undefined
					},
					grid: {
						display: false
					}
				}
			},
			animation: {
				duration: 750,
				easing: 'easeInOutQuart'
			}
		}
	})
}

function updateNavigation() {
	const totalWords = indexData.totalWords
	const maxPage = Math.ceil(totalWords / wordsPerPage) - 1
	const startIdx = currentPage * wordsPerPage + 1
	const endIdx = Math.min((currentPage + 1) * wordsPerPage, totalWords)

	document.getElementById('prevBtn').disabled = currentPage === 0
	document.getElementById('nextBtn').disabled = currentPage >= maxPage
	document.getElementById(
		'positionInfo'
	).textContent = `${startIdx}-${endIdx} –∏–∑ ${totalWords.toLocaleString()}`

	document.getElementById(
		'chartInfo'
	).textContent = `–ü–æ–∫–∞–∑–∞–Ω—ã —Å–ª–æ–≤–∞ —Å ${startIdx} –ø–æ ${endIdx} —Ä–∞–Ω–≥. –í—Å–µ–≥–æ –ª–µ–∫—Å–µ–º: ${totalWords.toLocaleString()}`
}

function showWordDetails(word) {
	const data = wordsData[word]
	if (!data) return

	const formsCount = Object.keys(data.forms).length
	const expansions = data.expansions || {}

	// –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–Ω–≥ —Å–ª–æ–≤–∞
	const rank = indexData.words.indexOf(word) + 1

	let html = `
		<h2>#${rank} ${word}</h2>
		<div class="stats">
			<div class="stat-card">
				<div class="stat-value">${data.total.toLocaleString()}</div>
				<div class="stat-label">–í—Å–µ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π</div>
			</div>
			<div class="stat-card">
				<div class="stat-value">${formsCount}</div>
				<div class="stat-label">–†–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º</div>
			</div>
			<div class="stat-card">
				<div class="stat-value">${Object.keys(expansions).length}</div>
				<div class="stat-label">–†–∞—Å—à–∏—Ñ—Ä–æ–≤–æ–∫</div>
			</div>
		</div>
		
		<div class="detail-section">
			<h3>–í—Å–µ —Ñ–æ—Ä–º—ã —Å–ª–æ–≤–∞ "${word}":</h3>
			<div class="forms-grid">
	`

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º—ã –ø–æ —á–∞—Å—Ç–æ—Ç–µ
	const sortedForms = Object.entries(data.forms).sort((a, b) => b[1] - a[1])

	sortedForms.forEach(([form, count]) => {
		const expansion = expansions[form]
		const percentage = ((count / data.total) * 100).toFixed(1)
		html += `
			<div class="form-card">
				<div class="form-word">${form}</div>
				<div class="form-count">üìä ${count.toLocaleString()} (${percentage}%)</div>
				${expansion ? `<div class="form-expansion">üí¨ ${expansion}</div>` : ''}
			</div>
		`
	})

	html += `
			</div>
		</div>
	`

	document.getElementById('detailsContent').innerHTML = html
	document.getElementById('wordDetails').classList.add('active')
	document
		.getElementById('wordDetails')
		.scrollIntoView({ behavior: 'smooth', block: 'nearest' })
}

function closeDetails() {
	document.getElementById('wordDetails').classList.remove('active')
}

// –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
document.addEventListener('keydown', e => {
	if (isSearchMode) return

	if (e.key === 'ArrowLeft') {
		previousPage()
	} else if (e.key === 'ArrowRight') {
		nextPage()
	}
})

// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–≤–∞–π–ø–æ–≤ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
let touchStartX = 0
let touchEndX = 0

const chartWrapper = document.querySelector('.chart-wrapper')

chartWrapper.addEventListener('touchstart', e => {
	touchStartX = e.changedTouches[0].screenX
})

chartWrapper.addEventListener('touchend', e => {
	touchEndX = e.changedTouches[0].screenX
	handleSwipe()
})

function handleSwipe() {
	const swipeThreshold = 50 // –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–≤–∞–π–ø–∞

	if (touchEndX < touchStartX - swipeThreshold) {
		// –°–≤–∞–π–ø –≤–ª–µ–≤–æ - —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
		nextPage()
	}

	if (touchEndX > touchStartX + swipeThreshold) {
		// –°–≤–∞–π–ø –≤–ø—Ä–∞–≤–æ - –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
		previousPage()
	}
}

// ============ –ü–û–ò–°–ö –°–õ–û–í–ê ============

let highlightedWord = null

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞
document.getElementById('searchInput')?.addEventListener('input', e => {
	const query = e.target.value.trim().toLowerCase()

	if (!query) {
		// –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É —Ä–µ–∂–∏–º—É
		highlightedWord = null
		searchCenterIndex = 0
		isSearchMode = false
		renderChart()
		updateNavigation()
		return
	}

	searchWord(query)
})

async function searchWord(query) {
	if (!indexData || !indexData.words) {
		console.error('–î–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
		return
	}

	// –ò—â–µ–º —Å–ª–æ–≤–æ –≤ –∏–Ω–¥–µ–∫—Å–µ (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞—á–∞–ª–æ —Å–ª–æ–≤–∞)
	let wordIndex = indexData.words.findIndex(word => word === query)

	// –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ –Ω–∞—á–∞–ª—É
	if (wordIndex === -1) {
		wordIndex = indexData.words.findIndex(word => word.startsWith(query))
	}

	if (wordIndex === -1) {
		// –°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
		document.getElementById(
			'chartInfo'
		).textContent = `–°–ª–æ–≤–æ "${query}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`
		return
	}

	const foundWord = indexData.words[wordIndex]
	highlightedWord = foundWord
	searchCenterIndex = wordIndex // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—Ç—Ä –Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
	isSearchMode = true

	await renderWordInContext(wordIndex, foundWord)
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–æ–≤–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
async function renderWordInContext(wordIndex, word) {
	// –í—ã—á–∏—Å–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Å–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (—á—Ç–æ–±—ã —Å–ª–æ–≤–æ –±—ã–ª–æ –≤ —Ü–µ–Ω—Ç—Ä–µ)
	const halfPage = Math.floor(wordsPerPage / 2)
	let startIdx = Math.max(0, wordIndex - halfPage)
	let endIdx = startIdx + wordsPerPage

	// –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º, –µ—Å–ª–∏ –≤—ã—à–ª–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
	if (endIdx > indexData.totalWords) {
		endIdx = indexData.totalWords
		startIdx = Math.max(0, endIdx - wordsPerPage)
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω—É–∂–Ω—ã–µ —á–∞–Ω–∫–∏
	const startChunk = Math.floor(startIdx / 100)
	const endChunk = Math.floor((endIdx - 1) / 100)

	const loadPromises = []
	for (let i = startChunk; i <= endChunk; i++) {
		if (!loadedChunks.has(i) && i < indexData.chunksCount) {
			loadPromises.push(loadChunk(i))
		}
	}

	if (loadPromises.length > 0) {
		await Promise.all(loadPromises)
	}

	// –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º —Å–ª–æ–≤–æ–º
	renderSearchResults(startIdx, endIdx, word)
}

function renderSearchResults(startIdx, endIdx, foundWord) {
	const pageWords = indexData.words.slice(startIdx, endIdx)

	// –°–æ–∑–¥–∞–µ–º entries –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	const entries = pageWords
		.map(word => [word, wordsData[word]])
		.filter(([word, data]) => data)

	updateChart(entries, foundWord)

	// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
	const wordData = wordsData[foundWord]
	const wordPosition = indexData.words.indexOf(foundWord) + 1
	document.getElementById(
		'chartInfo'
	).textContent = `–ù–∞–π–¥–µ–Ω–æ: "${foundWord}" (–º–µ—Å—Ç–æ ${wordPosition} –∏–∑ ${indexData.totalWords}, —á–∞—Å—Ç–æ—Ç–∞: ${wordData.total})`

	// –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω—Ç—Ä–∞ –æ–∫–Ω–∞
	document.getElementById('prevBtn').disabled = searchCenterIndex <= 0
	document.getElementById('nextBtn').disabled =
		searchCenterIndex >= indexData.totalWords - 1
	document.getElementById(
		'positionInfo'
	).textContent = `–†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ (–ø–æ–∫–∞–∑–∞–Ω—ã: ${startIdx + 1}-${endIdx})`
}
